CMAKE_MINIMUM_REQUIRED (VERSION 2.6)
PROJECT (urltest_webdav C)

#
# Program version:
#
SET(URLTEST_WEBDAV_VERSION_MAJOR 1)
SET(URLTEST_WEBDAV_VERSION_MINOR 0)
SET(URLTEST_WEBDAV_VERSION_BUG   0)
SET(URLTEST_WEBDAV_VERSION_STRING "${URLTEST_WEBDAV_VERSION_MAJOR}.${URLTEST_WEBDAV_VERSION_MINOR}.${URLTEST_WEBDAV_VERSION_BUG}")

#
# Cached variables for this project:
#
SET(CURL_PREFIX "" CACHE PATH "Installation path for libcurl")

#
# GNU-like installation:
#
INCLUDE(GNUInstallDirs)

#
# For finding packages and functions:
#
INCLUDE(CheckIncludeFiles)
INCLUDE(FindPackageHandleStandardArgs)
INCLUDE(CheckFunctionExists)

#
# Locate libcurl:
#
IF (CURL_PREFIX)
  LIST(APPEND CMAKE_PREFIX_PATH ${CURL_PREFIX})
ENDIF (CURL_PREFIX)
FIND_PACKAGE(CURL REQUIRED)
IF (CURL_FOUND)
	IF (CURL_VERSION_STRING VERSION_LESS "7.21.3")
		MESSAGE(FATAL_ERROR "libcurl ${CURL_VERSION_STRING} < 7.21.3 (required version)")
	ENDIF (CURL_VERSION_STRING VERSION_LESS "7.21.3")
ELSE (CURL_FOUND)
	MESSAGE(FATAL_ERROR "libcurl could not be found")
ENDIF (CURL_FOUND)

#
# Use random() or rand()?
#
CHECK_FUNCTION_EXISTS (srandomdev HAVE_SRANDOMDEV)
IF (HAVE_SRANDOMDEV)
	SET(HAVE_RANDOM True)
ELSE (HAVE_SRANDOMDEV)
	CHECK_FUNCTION_EXISTS (srandom HAVE_SRANDOM)
	IF (HAVE_SRANDOM)
		SET(HAVE_RANDOM True)
	ENDIF (HAVE_SRANDOM)
ENDIF (HAVE_SRANDOMDEV)

#
# Is asprintf() present?
#
CHECK_FUNCTION_EXISTS (asprintf HAVE_ASPRINTF)

#
# Do we have FTS?
#
CHECK_FUNCTION_EXISTS (fts_read HAVE_FTS_READ)
IF (NOT HAVE_FTS_READ)
	MESSAGE(FATAL_ERROR "The C FTS functions are required")
ENDIF (NOT HAVE_FTS_READ)
CHECK_FUNCTION_EXISTS (fts_open HAVE_FTS_OPEN)
IF (NOT HAVE_FTS_OPEN)
        MESSAGE(FATAL_ERROR "The C FTS functions are required")
ENDIF (NOT HAVE_FTS_OPEN)

#
# unistd.h?
#
CHECK_INCLUDE_FILES(unistd.h HAVE_UNISTD_H)

#
# The executable:
#
CONFIGURE_FILE(config.h.in config.h)
ADD_EXECUTABLE(urltest_webdav fs_entity.c http_ops.c http_stats.c util_fns.c urltest_webdav.c)
TARGET_INCLUDE_DIRECTORIES(urltest_webdav PUBLIC ${CMAKE_CURRENT_BINARY_DIR} ${CURL_INCLUDE_DIRS})
TARGET_LINK_LIBRARIES(urltest_webdav -lm ${CURL_LIBRARIES})
INSTALL(TARGETS urltest_webdav DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT binaries)

